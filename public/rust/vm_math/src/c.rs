/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec2f {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_Vec2f() {
    assert_eq!(
        ::std::mem::size_of::<Vec2f>(),
        8usize,
        concat!("Size of: ", stringify!(Vec2f))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec2f>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec2f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec2f>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Vec2f), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec2f>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Vec2f), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_Vec3f() {
    assert_eq!(
        ::std::mem::size_of::<Vec3f>(),
        12usize,
        concat!("Size of: ", stringify!(Vec3f))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec3f>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec3f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec3f>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Vec3f), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec3f>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Vec3f), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec3f>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Vec3f), "::", stringify!(z))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_Vec4f() {
    assert_eq!(
        ::std::mem::size_of::<Vec4f>(),
        16usize,
        concat!("Size of: ", stringify!(Vec4f))
    );
    assert_eq!(
        ::std::mem::align_of::<Vec4f>(),
        4usize,
        concat!("Alignment of ", stringify!(Vec4f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec4f>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Vec4f), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec4f>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Vec4f), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec4f>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Vec4f), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vec4f>())).w as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(Vec4f), "::", stringify!(w))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat4f {
    pub cols: [Vec4f; 4usize],
}
#[test]
fn bindgen_test_layout_Mat4f() {
    assert_eq!(
        ::std::mem::size_of::<Mat4f>(),
        64usize,
        concat!("Size of: ", stringify!(Mat4f))
    );
    assert_eq!(
        ::std::mem::align_of::<Mat4f>(),
        4usize,
        concat!("Alignment of ", stringify!(Mat4f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Mat4f>())).cols as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Mat4f),
            "::",
            stringify!(cols)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CameraMatrices {
    pub view_matrix: Mat4f,
    pub projection_matrix: Mat4f,
    pub model_matrix: Mat4f,
    pub mvp_matrix: Mat4f,
}
#[test]
fn bindgen_test_layout_CameraMatrices() {
    assert_eq!(
        ::std::mem::size_of::<CameraMatrices>(),
        256usize,
        concat!("Size of: ", stringify!(CameraMatrices))
    );
    assert_eq!(
        ::std::mem::align_of::<CameraMatrices>(),
        4usize,
        concat!("Alignment of ", stringify!(CameraMatrices))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CameraMatrices>())).view_matrix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraMatrices),
            "::",
            stringify!(view_matrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraMatrices>())).projection_matrix as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraMatrices),
            "::",
            stringify!(projection_matrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CameraMatrices>())).model_matrix as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraMatrices),
            "::",
            stringify!(model_matrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CameraMatrices>())).mvp_matrix as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraMatrices),
            "::",
            stringify!(mvp_matrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OthroCameraTransforms {
    pub viewport_size: Vec2f,
    pub position: Vec2f,
    pub zoom: f32,
}
#[test]
fn bindgen_test_layout_OthroCameraTransforms() {
    assert_eq!(
        ::std::mem::size_of::<OthroCameraTransforms>(),
        20usize,
        concat!("Size of: ", stringify!(OthroCameraTransforms))
    );
    assert_eq!(
        ::std::mem::align_of::<OthroCameraTransforms>(),
        4usize,
        concat!("Alignment of ", stringify!(OthroCameraTransforms))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OthroCameraTransforms>())).viewport_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OthroCameraTransforms),
            "::",
            stringify!(viewport_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OthroCameraTransforms>())).position as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OthroCameraTransforms),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OthroCameraTransforms>())).zoom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OthroCameraTransforms),
            "::",
            stringify!(zoom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Transforms2D {
    pub position: Vec2f,
    pub scaling: Vec2f,
    pub rotation: f32,
}
#[test]
fn bindgen_test_layout_Transforms2D() {
    assert_eq!(
        ::std::mem::size_of::<Transforms2D>(),
        20usize,
        concat!("Size of: ", stringify!(Transforms2D))
    );
    assert_eq!(
        ::std::mem::align_of::<Transforms2D>(),
        4usize,
        concat!("Alignment of ", stringify!(Transforms2D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Transforms2D>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Transforms2D),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Transforms2D>())).scaling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Transforms2D),
            "::",
            stringify!(scaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Transforms2D>())).rotation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Transforms2D),
            "::",
            stringify!(rotation)
        )
    );
}
extern "C" {
    pub fn tech_paws_vm_math_create_ortho_camera_matrices(
        transforms: OthroCameraTransforms,
    ) -> CameraMatrices;
}
extern "C" {
    pub fn tech_paws_vm_math_transforms_create_2d_model_matrix(transforms: Transforms2D) -> Mat4f;
}
extern "C" {
    pub fn tech_paws_vm_math_create_translate_mat(m: Mat4f, pos: Vec3f) -> Mat4f;
}
extern "C" {
    pub fn tech_paws_vm_math_create_rotate_mat(m: Mat4f, rotation: f32, axis: Vec3f) -> Mat4f;
}
extern "C" {
    pub fn tech_paws_vm_math_create_scale_mat(m: Mat4f, scaling: Vec3f) -> Mat4f;
}
extern "C" {
    pub fn tech_paws_vm_math_mat4_to_mat4_mul(m1: Mat4f, m2: Mat4f) -> Mat4f;
}
extern "C" {
    pub fn tech_paws_vm_math_mat4_to_vec4_mul(m: Mat4f, v: Vec4f) -> Vec4f;
}
extern "C" {
    pub fn tech_paws_vm_math_vec4_to_mat4_mul(v: Vec4f, m: Mat4f) -> Vec4f;
}
